/**
 * 법적 보호를 위한 동의서 관리 시스템
 * 프롬프트 뱅크 서비스의 관리자 면책을 위한 완전한 동의 체계
 */

import prisma from '@/lib/prisma'

// 동의서 타입 정의 - 단일 통합 동의서로 변경
export type ConsentType = 'unified_terms'

// 현재 활성 동의서 버전
export const CURRENT_CONSENT_VERSION = 'v2.1'

// 통합 동의서 내용 정의 (법적 보호 완료)
export const CONSENT_CONTENTS = {
  unified_terms: {
    title: '프롬프트 뱅크 서비스 이용약관 및 개인정보 처리 동의 (필수)',
    version: CURRENT_CONSENT_VERSION,
    content: `
# 프롬프트 뱅크 서비스 이용약관 및 개인정보 처리 동의서

## 📋 동의서 개요 및 기본사항

본 동의서는 프롬프트 뱅크 서비스 이용에 관한 포괄적인 약관으로, 서비스의 성격, 관리자 권한, 개인정보 처리, 면책사항 등 서비스 이용과 관련된 모든 중요사항을 통합하여 규정하고 있습니다.

본 서비스는 사용자가 프롬프트를 체계적으로 관리하고 활용할 수 있도록 돕는 웹 애플리케이션으로, 서비스의 안정적인 운영과 품질 향상을 위해 관리자는 시스템 내 모든 데이터에 접근할 수 있는 권한을 보유하고 있습니다. 또한 서비스 특성상 사용자가 생성하는 모든 콘텐츠와 활동 기록이 관리자에게 투명하게 공개되므로, 이러한 환경에서 서비스를 이용하시는 것에 대한 충분한 이해와 동의가 필요합니다.

서비스 제공자는 예기치 못한 기술적 문제, 외부 요인으로 인한 서비스 중단, 데이터 손실 등의 상황에 대해 법적 책임을 지지 않으며, 사용자는 이러한 위험을 충분히 인지하고 자신의 판단 하에 서비스를 이용하게 됩니다.

**본 서비스를 이용하기 위해서는 아래 모든 내용에 대한 동의가 필수이며, 부분적 동의는 불가능합니다.**

---

## 제1조 (서비스의 성격 및 목적)

**1.1 서비스 정의**
- 본 서비스는 프롬프트 관리를 위한 웹 애플리케이션 서비스입니다.
- 사용자는 프롬프트를 생성, 저장, 분류, 검색할 수 있습니다.

**1.2 서비스 운영 방침**
- 서비스는 제공자의 판단에 따라 언제든지 변경되거나 중단될 수 있습니다.
- 서비스 이용 목적은 제한하지 않으며, 사용자가 자유롭게 활용할 수 있습니다.
- 단, 불법적이거나 부적절한 용도로의 사용은 금지됩니다.

## 제2조 (관리자 권한 및 데이터 접근)

**서비스의 안정적 운영과 품질 향상을 위해 관리자는 다음과 같은 포괄적 권한을 가지며, 사용자는 이에 대해 사전 동의해야 합니다:**

**2.1 데이터 접근 권한**
관리자는 사용자의 동의 없이 언제든지 다음 데이터에 접근할 수 있습니다:
- **프롬프트 콘텐츠**: 제목, 본문, 카테고리, 태그를 포함한 모든 프롬프트 데이터
- **사용 통계**: 접속 시간, 사용 빈도, 선호 카테고리, 활동 패턴 등
- **개인 기록**: 계정 생성, 프롬프트 생성/수정/삭제, 로그인 기록 등
- **개인정보**: 이름, 이메일, 접속 IP, 사용 기기 정보 등

**2.2 데이터 활용 목적**
- 서비스 품질 향상 및 기능 개선
- 부적절한 콘텐츠 감지 및 사전 차단
- 시스템 보안 강화 및 장애 신속 대응
- 서비스 성능 최적화 및 사용자 경험 개선
- 사용자 지원, 기술적 문제 해결
- 서비스 운영 통계 분석 및 정책 수립

**2.3 관리 및 제재 권한**
- 사전 통지 없이 부적절한 콘텐츠 삭제 또는 수정
- 약관 위반 시 계정 일시정지 또는 영구 정지
- 시스템 안정성을 위한 데이터 조작 및 계정 관리
- 법적 요구나 수사기관 요청 시 데이터 제공

## 제3조 (개인정보 수집 및 이용)

**3.1 수집하는 개인정보**
본 서비스는 회원가입 및 서비스 제공을 위해 다음과 같은 개인정보를 수집합니다:
- **필수정보**: 이름, 이메일 주소, 비밀번호
- **자동수집정보**: 접속 로그, IP 주소, 쿠키, 브라우저 정보, 운영체제 정보
- **서비스 이용정보**: 프롬프트 생성/수정/삭제 기록, 카테고리 선택 패턴, 태그 사용 현황
- **생성 콘텐츠**: 사용자가 작성한 모든 프롬프트 데이터

**3.2 개인정보 이용 목적**
수집된 개인정보는 다음과 같은 목적으로 이용됩니다:
- 회원 식별 및 본인 확인, 서비스 제공 및 운영
- 개인화된 서비스 제공 및 맞춤형 콘텐츠 추천
- 서비스 개선, 신기능 개발, 품질 향상
- 부정 이용 방지, 보안 강화, 시스템 안정성 확보
- 고객 지원, 문의 처리, 공지사항 전달
- 서비스 이용 통계 분석 및 마케팅 활용

**3.3 개인정보 보유 및 이용 기간**
- **원칙**: 회원 탈퇴 시까지 보관
- **법적 의무**: 관련 법령에 따른 보관 의무가 있는 경우 해당 기간까지 보관
- **서비스 종료**: 서비스 종료 시 지체없이 파기 (단, 법적 의무 보관 대상 제외)
- **백업 데이터**: 시스템 장애 복구를 위한 백업 데이터는 최대 6개월간 보관 가능

## 제4조 (데이터 처리 및 분석)

**서비스 개선과 최적화를 위해 수집된 데이터를 다양한 방식으로 처리 및 분석하는 것에 동의합니다:**

**4.1 데이터 분석 범위 및 목적**
- **행동 패턴 분석**: 사용자별 서비스 이용 패턴, 선호도, 활동 시간대 분석
- **콘텐츠 분석**: 프롬프트 품질, 인기 키워드, 카테고리별 활용도 분석
- **성능 최적화**: 시스템 성능, 응답속도, 사용자 경험 개선을 위한 기술적 분석
- **트렌드 파악**: 프롬프트 트렌드, 사용자 니즈 변화, 서비스 발전 방향 수립

**4.2 데이터 처리 방식**
- **실시간 처리**: 서비스 운영 중 실시간으로 데이터 수집 및 분석
- **개인식별 가능**: 필요에 따라 개인을 식별할 수 있는 형태로 데이터 처리
- **익명화 선택**: 관리자 판단에 따라 익명화 처리 여부 결정
- **안전한 보관**: 암호화된 환경에서 데이터 저장 및 관리
- **접근 제한**: 권한을 가진 관리자만 데이터 접근 가능

## 제5조 (서비스 제공자 면책사항)

**다음 사항들에 대해 서비스 제공자는 어떠한 법적 책임도 지지 않으며, 사용자는 이를 충분히 이해하고 동의해야 합니다:**

**5.1 서비스 관련 면책**
- 예고 없는 서비스 중단, 변경, 기능 제한, 완전 종료
- 시스템 점검, 업데이트로 인한 일시적 서비스 불가
- 서버 장애, 네트워크 문제로 인한 접속 불가 또는 속도 저하

**5.2 데이터 관련 면책**
- 사용자 데이터의 손실, 삭제, 변조, 유출
- 백업 실패 또는 복구 불가능한 상황
- 해킹, 바이러스, 악성코드로 인한 데이터 피해

**5.3 사용자 관련 면책**
- 사용자 간의 분쟁, 갈등, 법적 문제
- 사용자의 부적절한 서비스 이용으로 인한 손해
- 사용자가 생성한 콘텐츠로 인한 저작권, 명예훼손 등의 문제

**5.4 제3자 관련 면책**
- 제3자에 의한 데이터 오남용, 무단 접근, 개인정보 유출
- 외부 서비스와의 연동 문제, 호환성 이슈
- 정부 정책 변경, 법령 개정으로 인한 서비스 제한

## 제6조 (서비스 이용 제한 및 계정 관리)

**관리자는 서비스의 안전하고 건전한 운영을 위해 다음의 경우 사전 통지 없이 즉시 서비스 이용을 제한할 수 있습니다:**

- 불법적, 음란적, 폭력적, 혐오적 콘텐츠 게시
- 타인의 권리 침해, 명예훼손, 모독적 내용 작성
- 스팸, 광고, 상업적 목적의 무분별한 콘텐츠 생성
- 시스템 부하 유발, 서비스 안정성 저해 행위
- 타 사용자의 서비스 이용 방해 행위
- 기타 관리자가 부적절하다고 판단하는 모든 행위

## 제7조 (약관의 변경 및 효력)

**7.1 약관 변경**
- 본 약관은 관리자의 필요에 따라 언제든지 변경될 수 있습니다.
- 변경된 약관은 서비스 내 공지, 이메일 통지 등의 방법으로 효력이 발생합니다.
- 변경 약관에 동의하지 않을 경우 즉시 서비스 이용을 중단해야 합니다.

**7.2 약관의 해석**
- 본 약관에서 명시되지 않은 사항은 관련 법령 및 상관례에 따릅니다.
- 약관의 일부가 무효로 판단될 경우 나머지 조항은 여전히 유효합니다.

## 제8조 (동의의 효력 및 최종 확인)

**본 약관에 동의버튼을 클릭함으로써 사용자는 다음 사항을 모두 이해하고 동의한 것으로 간주됩니다:**

- 위에 명시된 모든 조건과 제한사항을 충분히 이해하고 수락
- 관리자의 포괄적인 데이터 접근 및 처리 권한에 대한 사전 동의
- 서비스 이용 중 발생할 수 있는 모든 위험에 대한 인지 및 수용
- 면책사항에 대한 충분한 이해와 동의
- 개인정보 수집, 이용, 제공에 대한 포괄적 동의

**⚠️ 중요: 이 서비스를 사용하기 위해서는 위 모든 내용에 대한 전체 동의가 필수이며, 부분적 동의나 조건부 동의는 불가능합니다.**
    `,
    required: true
  }
} as const

/**
 * 기본 동의서 버전을 데이터베이스에 삽입
 */
export async function seedConsentVersions() {
  for (const [type, consent] of Object.entries(CONSENT_CONTENTS)) {
    await (prisma as any).consentVersion.upsert({
      where: {
        type_version: {
          type,
          version: consent.version
        }
      },
      update: {
        title: consent.title,
        content: consent.content,
        isActive: true,
        activatedAt: new Date()
      },
      create: {
        type,
        version: consent.version,
        title: consent.title,
        content: consent.content,
        isActive: true,
        activatedAt: new Date()
      }
    })
  }
}

/**
 * 사용자의 모든 필수 동의 완료 여부 확인
 */
export async function hasAllRequiredConsents(userId: string): Promise<boolean> {
  const requiredTypes = Object.entries(CONSENT_CONTENTS)
    .filter(([_, consent]) => consent.required)
    .map(([type]) => type)

  const consents = await (prisma as any).userConsent.findMany({
    where: {
      userId,
      consentType: { in: requiredTypes },
      version: CURRENT_CONSENT_VERSION,
      agreed: true
    }
  })

  return consents.length === requiredTypes.length
}

/**
 * 사용자 동의 기록
 */
export async function recordUserConsent(
  userId: string,
  consentType: ConsentType,
  agreed: boolean,
  ipAddress?: string,
  userAgent?: string
) {
  return await (prisma as any).userConsent.upsert({
    where: {
      userId_consentType_version: {
        userId,
        consentType,
        version: CURRENT_CONSENT_VERSION
      }
    },
    update: {
      agreed,
      agreedAt: new Date(),
      ipAddress,
      userAgent
    },
    create: {
      userId,
      consentType,
      version: CURRENT_CONSENT_VERSION,
      agreed,
      ipAddress,
      userAgent
    }
  })
}

/**
 * 관리자 접근 로그 기록
 */
export async function logAdminAccess(params: {
  adminId: string
  targetUserId: string
  action: string
  reason?: string
  ipAddress?: string
  userAgent?: string
  accessedData?: any
}) {
  return await (prisma as any).adminAccessLog.create({
    data: {
      ...params,
      accessedData: params.accessedData ? JSON.stringify(params.accessedData) : null
    }
  })
} 